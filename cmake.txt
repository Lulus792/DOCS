MyProject/
├── src/
│   └── main.cpp
└── CMakeLists.txt

# CMakeLists.txt

# Minimum CMake version required
cmake_minimum_required(VERSION 3.10)

# Project name and version
project(MyProject VERSION 1.0)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Add the executable target
add_executable(MyProject src/main.cpp)

--------------------------------------

# Adding a static library

MyProject/
├── src/
│   ├── main.cpp
│   └── mylib/
│       ├── mylib.h
│       └── mylib.cpp
└── CMakeLists.txt

# Minimum CMake version required
cmake_minimum_required(VERSION 3.10)

# Project name and version
project(MyProject VERSION 1.0)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Add the library
add_library(mylib src/mylib/mylib.cpp)

# Add the executable target
add_executable(MyProject src/main.cpp)

# Link the library to the executable
target_link_libraries(MyProject PRIVATE mylib)

# Include the library headers
target_include_directories(MyProject PRIVATE ${CMAKE_SOURCE_DIR}/src/mylib)

---------------------------------------------------------------------------

# Using external librarys

# Find the Boost library
find_package(Boost 1.70 REQUIRED)

# Include the Boost headers
include_directories(${Boost_INCLUDE_DIRS})

# Link the Boost libraries (assuming you need the filesystem library)
target_link_libraries(MyProject PRIVATE ${Boost_LIBRARIES})

---------------------------------------------------------------------

# Configuring different build types

# Set the default build type to Release
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Define build types
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

----------------------------------

# Adding target install

# Installation rules
install(TARGETS MyProject DESTINATION bin)
install(TARGETS mylib DESTINATION lib)
install(FILES src/mylib/mylib.h DESTINATION include)

sh :
	cmake --build . --target install

----------------------------------------------------

# create a package (zip etc.)

# CPack configuration
set(CPACK_PACKAGE_NAME "MyProject")
set(CPACK_PACKAGE_VERSION "1.0")
set(CPACK_PACKAGE_CONTACT "your.email@example.com")

# Specify the package generator(s) you want to use
set(CPACK_GENERATOR "ZIP;DEB")

# Additional package metadata
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Your Name")  # required for DEB
set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.27)")

# Include CPack module
include(CPack)

sh :
	cpack
	
---------------------------------------------------------------------

# include multiple files

# Minimum CMake version required
cmake_minimum_required(VERSION 3.10)

# Project name and version
project(MyProject VERSION 1.0)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Source files
set(SOURCES
    src/main.cpp
    src/mylib/mylib.cpp
    src/mylib/utils.cpp
    src/anotherlib/anotherlib.cpp
)

# Header files (for IDEs and completeness)
set(HEADERS
    src/mylib/mylib.h
    src/mylib/utils.h
    src/anotherlib/anotherlib.h
)

# Add the library (optional if you want to use a library)
add_library(mylib
    src/mylib/mylib.cpp
    src/mylib/utils.cpp
)

# Add the executable target
add_executable(MyProject ${SOURCES} ${HEADERS})

# Link the library to the executable (if you have created a library)
target_link_libraries(MyProject PRIVATE mylib)

# Include directories
target_include_directories(MyProject PRIVATE ${CMAKE_SOURCE_DIR}/include)

# Installation rules
install(TARGETS MyProject DESTINATION bin)
install(TARGETS mylib DESTINATION lib)
install(FILES include/mylib/mylib.h include/mylib/utils.h include/anotherlib/anotherlib.h DESTINATION include)

-----------------------------------------------------------------------------------------

# build directory

cmake -DCMAKE_BUILD_TYPE=Debug ..
cmake -DCMAKE_BUILD_TYPE=Release ..

